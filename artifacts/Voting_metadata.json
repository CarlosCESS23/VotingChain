{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "candidateId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					}
				],
				"name": "Voted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum Voting.VotingState",
						"name": "newState",
						"type": "uint8"
					}
				],
				"name": "VotingStateChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "addCandidate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "candidates",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "voteCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "candidatesCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllCandidates",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "voteCount",
								"type": "uint256"
							}
						],
						"internalType": "struct Voting.Candidate[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_voter",
						"type": "address"
					}
				],
				"name": "getVoterStatus",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_candidateId",
						"type": "uint256"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "voters",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingState",
				"outputs": [
					{
						"internalType": "enum Voting.VotingState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Um contrato inteligente para um sistema de votação transparente. Permite que o proprietário do contrato gerencie candidatos e o período de votação. Cada endereço só pode votar uma vez.",
			"kind": "dev",
			"methods": {
				"addCandidate(string)": {
					"details": "Adiciona um novo candidato à votação.",
					"params": {
						"_name": "O nome do candidato. Apenas o proprietário pode adicionar candidatos e apenas antes do início da votação."
					}
				},
				"constructor": {
					"details": "O construtor define o proprietário do contrato e o estado inicial da votação."
				},
				"endVoting()": {
					"details": "Encerra o período de votação. Apenas o proprietário pode encerrar a votação."
				},
				"getAllCandidates()": {
					"details": "Retorna uma lista de todos os candidatos e seus votos.",
					"returns": {
						"_0": "Uma lista de estruturas de Candidatos. Esta função é do tipo 'view', portanto não gasta gás para ser chamada."
					}
				},
				"getVoterStatus(address)": {
					"details": "Verifica se um endereço específico já votou.",
					"params": {
						"_voter": "O endereço a ser verificado."
					},
					"returns": {
						"_0": "true se o endereço já votou, false caso contrário."
					}
				},
				"startVoting()": {
					"details": "Inicia o período de votação. Apenas o proprietário pode iniciar a votação."
				},
				"vote(uint256)": {
					"details": "Permite que um eleitor registre seu voto para um candidato.",
					"params": {
						"_candidateId": "O ID do candidato para o qual votar. A votação deve estar aberta e o eleitor não pode ter votado antes."
					}
				}
			},
			"title": "Voting",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/voting.sol": "Voting"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/voting.sol": {
			"keccak256": "0xc35e898f22fad1c0bb48543736f3ec95f12e509ef24621540a230e395c6acf2b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1021726ffed334d937c164d4136fe949a3f7e3f8016c4a907016f5e4b5ce70bc",
				"dweb:/ipfs/QmW5LY9beu2nay1GoTyMNAwCtJ2iQZiRRPrLT8pG5HPGhH"
			]
		}
	},
	"version": 1
}